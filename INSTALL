== 1. Systemvorraussetzungen ==
Server: Da zuverlaessig Cronjobs ausgefuehrt werden muessen, ist ein richtiger
	Root- oder vServer (aktuell) unabdingbar. 
Webserver: Httpd ist egal, aber PHP5 wird benoetigt. Vielleicht sogar PHP 5.1
	oder 5.2, das solltet ihr dann probieren ;) Ausserdem wird mcrypt benoetigt.
Datenbank: Hier wird MySQL 5.0 mit InnoDB vorrausgesetzt.

== 2. Kurzer ueberblick ==
Das Spiel hat einen etwas abstrakteren Aufbau: Es bringt keine normale Frontend-
	Registrierung mit, sondern wird von einem Controller "bedient". Das heisst es
	zerfaellt in 2 Teile: Einmal das Spiel selbst und einer separaten Installa-
	tion, die mehrere Spiele verwalten kann. In diesem Controller sind auch die
	Benutzer registriert. Diese koennen auch auf verschiedenen Servern liegen und
	kommunizieren ueber ein spezielles (verschluesseltes) Protokoll, WOTAPIP 2.1
	(das aber mal eine ueberarbeitung notwendig hat).
	
== 3. Installation (allgemein) ==
Wie oben erwaehnt, braucht ihr zwei verschiedene "Stationen". Beide bauen in mei-
	ner Implementation auf das WCF auf (der Controller koennte aber auch unab-
	haengig davon realisiert werden). D.h. ihr braucht zwei separate WCF-Installa-
	tionen. Die Standalone-Version koennt ihr unter [1] herunterladen. Bei der In-
	stallation fuer das Game bitte in ein wcf/-Verzeichnis installieren, in dessen
	uebergeordneten Verzeichnis ihr dann das Game reinpacken koennt (siehe unten).
	Bei der Installation fuer den Controller solltet ihr das WBB Lite von [4]
	isntallieren, da es noch weitere Pakete mitbringt, die benoetigt werden.
	
== 4. Installation (Controller) ==
Um den Controller ins WCF zu installieren, muesst ihr das Plugin von [2] herunter-
	laden und installieren (ueber das WCF-Paketsystem). Danach koennt ihr unter den
	Benutzergruppenrechten einstellen, wer (zu verwaltende) Server erstellen usw.
	kann. Zur Einrichtung weiter unten.
	
== 5. Installation (Game) ==
Ladet euch dazu einfach das Tarball herunter und entpackt es so, dass das
	(Ugamela-)Hauptverzeichnis eine Stufe ueberhalb des wcf/-Verzeichnisses befin-
	det. Danach muss das aktuelle SQL-Dump von [2] in die Datenbank importiert
	werden. Schaut euch danach die game/execute*.php-Dateien an, denn in denen
	muessen von Hand die Pfade und ein paar Einstellungen veraendert werden. Ausser-
	dem muessen die Socket- und Verschluesselungs-Pakete von [2] installiert wer-
	den.
	
== 6. Einrichtung ==
Zunaechst einmal muessen die Cronjobs so wie in A. beschrieben eingerichtet werden.
	Insbesondere ohne executeServer.php kann der Controller keine Verbindung zum
	Game herstellen! Sobald der laeuft, kann die Verbindung eingerichtet werden.
	Dafuer braucht ihr einen Schluessel, den euch tools/keygen.php (im darauf zuzu-
	greifen muesst ihr 9. beachten) generiert. Der muss in game/executeServer.php
	(Z. 91) eingetragen werden. Im Controller koennt ihr im WCF-ACP unter Inhalte >
	Spiel > Server hinzufuegen die Verbindungsdaten wie Host, Port und Schluessel
	eingeben. Ihr koennt die Verbindung testen, indem ihr euch z.B. ueber das ACP
	(Benutzer bearbeiten) registriert.
	
== 7. Registrierungsvorgang ==
Die Registrierung kann ueber eine Endanwendung im Controller passieren, bei der
	eine Serverwahl angezeigt wird. Die von uns genutzte Version laeuft aber ueber
	eine externe Registrierungsseite, die die Daten an den Controller uebergeben
	kann, sodass die Spieler im Optimalfall von dem Gewusel garnichts mitbekom-
	men. Schaut euch dazu am besten [3] an. Der Controller nimmt aber nur Re-
	gistrierungen an, die von erlaubten Seiten stammen, die im ACP unter
	Optionen > Spiel > Registrierung eingestellt werden kann (dort muss das ganze
	auch erstmal aktiviert werden).
	
== 8. Startseite ==
Wegen ein paar Copyrightproblemen ist (noch) keine Startseite dabei. Der Login
	funktioniert wie bei Ugamela 0.2c (auf dem das ganze basiert) ueber die
	login.php. Die Registrierung ist wie unter 7. gezeigt etwas komplizierter.
	
== 9. Zugriffsschutz ==
Dateien wie die game/execute*.php- oder die /tools/*-Dateien sollten vor fremden
	Zugriff natuerlich geschuetzt werden. Standardmaessig gibts (wenn .htaccess
	erlaubt ist) einen 500er-Fehler, wenn jemand darauf zugreift. Wenn ihr darauf
	aber Zugriff haben wollt, muesst ihr eine .htpasswd einrichten (generierbar
	ueber den htpasswd-Befehl oder z.B. unter [5]) und die Pfade in den Dateien
	.htaccess und tools/.htaccess anpassen.
Um weitere Verzeichnisse zu schuetzen, koennt ihr tools/_htaccess nach Anpassung
	des Pfades in die betreffenden Verzeichnisse unter dem Namen .htaccess ko-
	pieren.	


== A. Crontab ==
game/executeDailyCleanup.php: Fuehrt kleinere Arbeiten durch, sollte, wie der Name
	schon sagt, einmal taeglich ausgefuehrt werden.
game/executeMinutlyCleanup.php: Fuehrt Arbeiten durch, die kontiniuerlich gemacht
	werden sollten (z.B. TFs und Logs loeschen). Daher sollte er, wie der Name
	schon sagt, minuetlich oder zumindest alle paar Minuten ausgefuehrt werden.
game/executeServer.php: Nimmt die Verbindungsanfragen vom Controller an und muss
	daher durchgehend aktiv sein. Eine Instanz laeuft fuenf Minten, daher MUSS es
	alle fuenf Minuten zuverlaessig gestartet werden!
game/executeStatRefresh.php: Fuehrt die Aktualisierungen durch. Kann nach belieben
	ausgefuehrt werden.
game/executeWOTEED.php: = WOT Event Execute Daemon, oder kurz der Eventhandler. Er
	sollte wie game/executeServer.php durchgehend laufen. Eine Instanz laeuft hier
	standardmaessig eine Minute, deswegen MUSS es jede Minute zuverlaessig gestartet
	werden!


[1] http://community.woltlab.com/db/index.php?page=Project&projectID=780
[2] http://github.com/Biggerskimo/WOT-Game/downloads
[3] http://lost-worlds.net/register.htm
[4] http://www.woltlab.com/products/burning_board_lite/index.php